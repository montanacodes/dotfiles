

;; Exactly one defcfg entry is required. This is used for configuration key-pairs.
(defcfg
  
)

(defsrc
     f1 f2 f3 f4 f5 f6 f7 f8         f9   f10  f11  f12  prnt  
  eql     1    2    3    4    5          6    7    8    9    0    min
  esc     q    w    f    p    b          j    l    u    y    ;    bksl
  del    a    r    s    t    g          m    n    e    i    o    '
  lsft    z    x    c    d    v          k    h    ,    .    /    caps
        grv  ins  lft  rght            up  down  lbrc  rbrc

                      lctl  lalt         rmet    rctl    
                 bks   rsft   home         pgup   return   spc
                             end 			    pgdn															
)
;; The first layer defined is the layer that will be active by default when
;; kanata starts up. This layer is the standard QWERTY layout except for the
;; backtick/grave key (@grl) which is an alias for a tap-hold key.
;;
;; ;; There are currently a maximum of 25 layers allowed.

(deflayer colemak
     f1 f2 f3 f4 f5 f6 f7 f8         f9   f10  f11  f12  prnt  
  eql     1    2    3    4    5          6    7    8    9    0    min
  esc     q    w    f    p    b          j    l    u    y    ;    bksl
  del    a    r    s    t    g          m    n    e    i    o    '
  lsft    z    x    c    d    v          k    h    ,    .    /    caps
        grv  bksl  left  rght            up  down  lbrc  rbrc

                      @dctl  lalt         rmet    rctl  
                 bks   rsft   @hext         @esym   @ssym   spc
                             tab 			    pgdn	
)

;; ;; ;; defalias is used to declare a shortcut for a more complicated action to keep
;; ;; the deflayer declarations clean and aligned. The alignment in deflayers is not
;; ;; necessary, but is strongly recommended for ease of understanding visually.
;; ;;
;; ;; Aliases are referred to by `@<alias_name>`. Aliases can refer to each other,
;; ;; e.g. in the `anm` alias. However, an alias can only refer to another alias
;; ;; that has been defined before it in the file.
;; (defalias 
;;   l_dh (layer-switch colemak)
;; )
;;   ;; aliases to change the base layer to qwerty or dvorak
  

;;   ;; Aliases for layer "toggling". It's not quite toggling because the layer
;;   ;; will be active while the key is held and deactivated when the key is
;;   ;; released. An alternate action name you can use is layer-while-held.
;;   ;; However, the rest of this document will use The term "toggle" for brevity.
  (defalias
  ext  (layer-toggle extend) ;; Bind 'ext' to the Extend Layer
;;  fun  (layer-toggle function) ;; Bind 'fun' to the Function Layer
  sym1 (layer-toggle symbols1) ;; Bind 'sym1' to Symbols Layer 1
;;  sym2 (layer-toggle symbols2) ;; Bind 'sym2' to Symbols Layer 2
  sym2 (layer-toggle symbols2) ;; Bind 'sym2' to Symbols Layer 2
  fun  (layer-toggle function) ;; Bind 'fun' to the Function Layer


  hext (tap-hold-press 200 200 home @ext)
  ;; pext (tap-hold 200 pgdn @ext)

  ;;lsym2 (tap-hold 200 left @sym2)
  ;;dsym2 (tap-hold 200 down @sym2)

  esym (tap-hold-press 200 200 return @sym2)
         
  ssym (tap-hold-press 200 200 spc @sym1)
  ;;rsym (tap-hold 200 rght @sym1)
  ;;usym (tap-hold 200 up @sym1)



  dctl (tap-hold-press 200 200 del lctrl)
)
  ;; tap-hold aliases with tap for dvorak key, and hold for toggle layers
  ;;
  ;; tap-hold pararmeter order:
  ;; 1. tap timeout
  ;; 2. hold timeout
  ;; 3. tap action
  ;; 4. hold action
  ;;
  ;; The hold timeout is the number of milliseconds after which the hold action
  ;; will activate.
  ;;
  ;; The tap timeout is best explained in a roundabout way. When you press and
  ;; hold a standard key on your keyboard (e.g. 'a'), your operating system will
  ;; read that and keep sending 'a' to the active application. To be able to
  ;; replicate this behaviour with a tap-hold key, you must press-release-press
  ;; the key within the tap timeout window (number is milliseconds). Simply
  ;; holding the key results in the hold action activating, which is why you
  ;; need to double-press for the tap action to stay pressed.
  ;;
  ;; There are two additional versions of tap-hold available:
  ;; 1. tap-hold-press: if there is a key press, the hold action is activated
  ;; 2. tap-hold-release: if there is a press and release of another key, the
  ;; hold action is activated
  ;;
  ;; These versions are useful if you don't want to wait for the whole hold
  ;; timeout to activate, but want to activate the hold action immediately
  ;; based on the next key press or press and release of another key. These
  ;; versions might be great to implement home row mods.
  ;;
  ;; If you come from kmonad, tap-hold-press and tap-hold-release are similar
  ;; to tap-hold-next and tap-hold-next-release, respectively. If you know
  ;; the underlying keyberon crate, tap-hold-press is the HoldOnOtherKeyPress
  ;; and tap-hold-release is the PermissiveHold configuration.
 

  ;; Below is an alias for the `multi` action which executes multiple actions
  ;; in order but at the same time.
  ;;
  ;; It may result in some incorrect/unexpected behaviour if combining complex
  ;; actions, so be reasonable with it. One reasonable use case is this alias:
  ;; press right-alt while also toggling to the `ralted` layer. The utility of
  ;; this is better revealed if you go see `ralted` and its aliases.

;;(defalias
  ;; shifted keys
  ;;{ S-[
  ;;} S-]
  ;;: S-;

  ;; alias numbers as themselves for use in macro
  ;;8 8
  ;;0 0
;;)

(defalias 
  ;; ls_s (one-shot 1500 lsft)
  ;; lc_s (one-shot 1500 lctl)
  ;; la_s (one-shot 1500 lalt)
  ;; ra_s (one-shot 1500 ralt)
  ;; lm_s (one-shot 1500 lmet)
  ;; lsc_s (around @lc_s @ls_s)
  ;; lac_s (around @lc_s @la_s)

)

(defalias

  ntab C-return
  tabdn C-pgdn
  tabup C-pgup

  renm A-f2
  ref C-r
  clse A-f4
  cpy C-c
  pst C-v
  cut C-x
  scpy C-S-c
  spst C-S-v
  scut C-S-x
  udo C-z
  all C-a
  fnd C-f
  bk A-left
  fw A-rght
  v+ volu
  v- voldwn
  v0 mute
  mpl pp
  mps prev
  mns next

  mpp pause


  ;; ra1 (around ralt 1)
  ;; ra2 (around ralt 2)
  ;; ra3 (around ralt 3)
  ;; ra4 (around ralt 4)
  ;; ra5 (around ralt 5)
  ;; ra6 (around ralt 6)
  ;; ra7 (around ralt 7)
  ;; ra8 (around ralt 8)
  ;; ra9 (around ralt 9)
  ;; ra0 (around ralt 0)
)

  ;; Having a cmd action in your configuration without explicitly enabling
  ;; `danger-enable-cmd` **and** using the cmd-enabled executable will make
  ;; kanata refuse to load your configuration. The aliases below are commented
  ;; out since commands aren't allowed by this configuration file.
  ;;
  ;; Note that the pararmeters to `cmd` are executed directly as opposed to
  ;; passed to a shell. So for example, `~` and `$HOME` would not refer
  ;; to your home directory on Linux.
  ;;
  ;; You can use:
  ;; `cmd bash -c "your_stuff_here"` to run your command inside of bash.
  ;;
  ;; cm1 (cmd bash -c "echo hello world")
  ;; cm2 (cmd rm -fr /tmp/testing)
;; )

;; The underscore _ means transparent. The key on the base layer will be used
;; instead. XX means no-op. The key will do nothing.
;; (deflayer numbers


;; The `lrld` action stands for "live reload". This will re-parse everything
;; except for linux-dev. So in Linux, you cannot live reload and switch keyboard
;; devices at the time of writing.
;;
;; Upon a successful reload, the kanata state will begin on the default base layer
;; in the configuration. E.g. in this example configuration, you would start on
;; the qwerty layer.
;;
;; WARNING: live reload leaks memory. This should not be a major problem though.
;; Here are the measurements of memory consumption on Windows for version 1.0.0:
;; - 20 reloads: 15.4 MB memory consumed
;; - 50 reloads: 20.4 MB memory consumed
;; So about 170 KB used per live reload. You'll probably be fine.
;;
;; Note: version 1.0.3 has probably doubled the amount of memory leaked per
;; reload, though it has not been measured. In practice it's still negligible
;; compared to a browser for example.

(defalias
  ;; Mouse wheel actions. The first number is the interval in milliseconds
  ;; between scroll actions. The second number is the distance in some arbitrary
  ;; unit. Play with the pararmeters to see what feels correct. Both numbers
  ;; must be in the range 1-65535
  ;;
  ;; In both Windows and Linux, 120 distance units is equivalent to a single
  ;; notch movement on a physical wheel. In Linux, not all desktop environments
  ;; support the REL_WHEEL_HI_RES event so kanata just doesn't use it; instead a
  ;; scroll happens if 120 or more distance units are accumulated. This may result
  ;; in poor scrolling experience so in Linux it is recommended to use a distance
  ;; value that is a multiple of 120.
  mwu (mwheel-up 50 120)
  mwd (mwheel-down 50 120)

  ;; Horizontal mouse wheel actions. Similar story to vertical mouse wheel.
  mwl (mwheel-left 50 120)
  mwr (mwheel-right 50 120)
)

(deflayer extend
     @mpl _ @mps @mns _ @ref _ _         _   _  _  _  _  
  _     f1    f2    f3    @clse    f5          f6    f7    f8    f9    f10    f11
  esc     _      @bk    @fw    @mwu    ssrq          pgup    home    up    end    caps    f12
  lalt   @udo   @cut    @cpy    @mwd   slck          pgdn    lft    down    rght    del    menu
  lmet    lmet    lsft    lctl    @pst    _          mlft    @ntab    S-f10    tab    cmp    ret
        _  _  _  _            _  _  _  _

                      _  _         _    rctrl    
                 _   _   _         @fun   @tabup   @tabdn
                             _ 			    _	
)
(deflayer symbols1
     _ _ _ _ _ _ _ _        _   _  _  _  _  
  _     _    _    _    _  _        _    _    _    _    _    _
  _     S-1    S-2    S-3    S-4    S-5         S-6    S-7    S-8    _    _    _
  _      S-bksl     -   S-lbrc   S-9    lbrc         =    S-,    ;    S-;    S-/    _    
  _     S-`      +    '       S-'    ,              S-.   /   S-min   f12    _    _
        _  _  _  _            _  _  _  _

                      _  _         _    _    
                 _   _   @fun         _   _   _
                             _ 			    _
)
(deflayer symbols2
     _ _ _ _ _ _ _ _         _   _  _  _  _  
  _     _    _    _    _   _       _    _    _    _    _    _
  _     S-1    S-2    S-3    S-4    S-5       S-6    S-7    S-8    _    _  _
  _    S-bksl     -   S-rbrc    S-0   rbrc  =    S-.   S-;   @renm    S-/    _
  `    S-`     +      '    S-'      ,  .    bksl   S-min    f12    _    _
        _  _  _  _            _  _  _  _

                      _  _         _    _    
                 _   _   _         _   _   _
                             _ 			    _	
)

(deflayer function
     _ _ _ _ _ _ _ _         _   _  _  _  _  
  _     _    _    _    _  _        _    _    _    _    _    _
  _     _  @mps  @mpp  @mns  brdown        f12   f7    f8    f9    C-+   _ 
  _     lalt lmet lsft lctl   brup        f11   f4    f5    f6    C--    _
  _     @v0   @v-   @scpy @v+   @spst      f10   f1    f2    f3    C-0    _
        _  _  _  _            _  _  _  _

                      _  _         _    _    
                 _   _   _         _   _   _
                             _ 			    _	
                             
)

